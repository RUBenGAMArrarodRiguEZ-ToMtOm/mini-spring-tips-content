<?xml version="1.0" encoding="UTF-8" ?>
<tip>
    <title> 
      use PostgreSQL as a message broker
    </title>
    <uid>2022-12-29</uid>
    <tweet>The accepted wisdom is that message brokers are for ephemeral messaging and databases for persistent state. But Kafka is a DB, and these days many databases support messaging! Here's how to use Spring Integration and PostgreSQL's NOTIFY semantics. HT rafaelcodes</tweet>
    <code>
<![CDATA[
    // the secret is the postgresql-backed channel and subscriber
    @Bean
    PostgresSubscribableChannel channel(PostgresChannelMessageTableSubscriber s, 
    JdbcChannelMessageStore ms) {
        return new PostgresSubscribableChannel(ms, "mygroup", s);
    }

    @Bean
    PostgresChannelMessageTableSubscriber subscriber(DataSourceProperties ds) {
        return new PostgresChannelMessageTableSubscriber(() -> DriverManager
                .getConnection(ds.getUrl(), ds.getUsername(), ds.getPassword()).unwrap(PgConnection.class));
    }

    @Bean
    JdbcChannelMessageStore messageStore(DataSource dataSource) {
        var messageStore = new JdbcChannelMessageStore(dataSource);
        messageStore.setChannelMessageStoreQueryProvider(new PostgresChannelMessageStoreQueryProvider());
        return messageStore;
    }

    @Bean
    ApplicationListener<ApplicationReadyEvent> demo(SubscribableChannel channel) {
        return event -> {
            channel.send(MessageBuilder.withPayload("hello " + UUID.randomUUID()).build());
            channel.subscribe(m -> System.out.println(m.getPayload()));
        };
    }
]]>
    </code>
</tip>
